{"ast":null,"code":"var _jsxFileName = \"/home/carol/Projetos/sd-024-b-project-trivia-react-redux/src/components/QuestionCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateScore } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuestionCard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      timer: 30,\n      result: false,\n      answers: []\n    };\n\n    this.cronometro = () => {\n      this.setState({\n        timer: 30\n      }, () => {\n        const second = 1000;\n        const idInterval = setInterval(() => {\n          this.setState(prevState => ({\n            result: false,\n            timer: prevState.timer - 1\n          }), () => {\n            const {\n              timer\n            } = this.state;\n\n            if (timer === 0 || timer < 0) {\n              clearInterval(idInterval);\n              this.setState({\n                timer: 0,\n                result: true\n              });\n            }\n          });\n        }, second);\n      });\n    };\n\n    this.handleAnswer = event => {\n      const {\n        value\n      } = event.target;\n      const {\n        data: {\n          difficulty\n        },\n        update\n      } = this.props;\n      const {\n        timer\n      } = this.state;\n      const baseScore = 10;\n\n      if (value === 'correct-answer') {\n        const difficultyScore = this.scoreHelper(difficulty);\n        const score = baseScore * timer * difficultyScore;\n        update(score);\n      }\n\n      this.setState({\n        timer: 0,\n        result: true\n      });\n    };\n\n    this.nextQuestion = () => {\n      const {\n        nextButtonHandler\n      } = this.props;\n      nextButtonHandler();\n      this.cronometro();\n      this.createAnswersArray();\n    };\n\n    this.createAnswersArray = () => {\n      const {\n        data\n      } = this.props;\n      const {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers\n      } = data;\n      const randomValue = 0.5;\n      const incorrect = incorrectAnswers.map(value => ({\n        value,\n        correct: 'wrong-answer'\n      }));\n      const answers = [{\n        value: correctAnswer,\n        correct: 'correct-answer'\n      }, ...incorrect].sort(() => Math.random() - randomValue);\n      this.setState({\n        answers\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createAnswersArray();\n    this.cronometro();\n  }\n\n  scoreHelper(difficulty) {\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n\n    if (difficulty === 'hard') {\n      return hard;\n    }\n\n    if (difficulty === 'medium') {\n      return medium;\n    }\n\n    if (difficulty === 'easy') {\n      return easy;\n    }\n  }\n\n  render() {\n    const {\n      data\n    } = this.props;\n    const {\n      category,\n      question\n    } = data;\n    const {\n      answers,\n      timer,\n      result\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: timer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        \"data-testid\": \"question-category\",\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        \"data-testid\": \"question-text\",\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"answer-options\",\n        children: [answers.map(_ref => {\n          let {\n            value,\n            correct\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            value: correct,\n            \"data-testid\": correct,\n            className: !result ? '' : correct,\n            disabled: result,\n            onClick: this.handleAnswer,\n            children: value\n          }, value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this);\n        }), result && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          \"data-testid\": \"btn-next\",\n          onClick: this.nextQuestion,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nQuestionCard.propTypes = {\n  data: PropTypes.shape().isRequired,\n  update: PropTypes.func.isRequired,\n  nextButtonHandler: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  update: data => dispatch(updateScore(data))\n});\n\nexport default connect(null, mapDispatchToProps)(QuestionCard);","map":{"version":3,"names":["React","PropTypes","connect","updateScore","QuestionCard","Component","state","timer","result","answers","cronometro","setState","second","idInterval","setInterval","prevState","clearInterval","handleAnswer","event","value","target","data","difficulty","update","props","baseScore","difficultyScore","scoreHelper","score","nextQuestion","nextButtonHandler","createAnswersArray","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","randomValue","incorrect","map","correct","sort","Math","random","componentDidMount","easy","medium","hard","render","category","question","propTypes","shape","isRequired","func","mapDispatchToProps","dispatch"],"sources":["/home/carol/Projetos/sd-024-b-project-trivia-react-redux/src/components/QuestionCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { updateScore } from '../redux/actions';\n\nclass QuestionCard extends React.Component {\n  state = {\n    timer: 30,\n    result: false,\n    answers: [],\n  };\n\n  componentDidMount() {\n    this.createAnswersArray();\n    this.cronometro();\n  }\n\n  cronometro = () => {\n    this.setState({ timer: 30 }, () => {\n      const second = 1000;\n      const idInterval = setInterval(() => {\n        this.setState((prevState) => ({\n          result: false,\n          timer: prevState.timer - 1,\n        }), () => {\n          const { timer } = this.state;\n          if (timer === 0 || timer < 0) {\n            clearInterval(idInterval);\n            this.setState({\n              timer: 0,\n              result: true,\n            });\n          }\n        });\n      }, second);\n    });\n  };\n\n  handleAnswer = (event) => {\n    const { value } = event.target;\n    const { data: { difficulty }, update } = this.props;\n    const { timer } = this.state;\n    const baseScore = 10;\n\n    if (value === 'correct-answer') {\n      const difficultyScore = this.scoreHelper(difficulty);\n      const score = baseScore * timer * difficultyScore;\n      update(score);\n    }\n    this.setState({ timer: 0, result: true });\n  };\n\n  nextQuestion = () => {\n    const { nextButtonHandler } = this.props;\n    nextButtonHandler();\n    this.cronometro();\n    this.createAnswersArray();\n  };\n\n  createAnswersArray = () => {\n    const { data } = this.props;\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = data;\n    const randomValue = 0.5;\n\n    const incorrect = incorrectAnswers.map((value) => ({\n      value,\n      correct: 'wrong-answer',\n    }));\n    const answers = [\n      {\n        value: correctAnswer,\n        correct: 'correct-answer',\n      },\n      ...incorrect]\n      .sort(() => Math.random() - randomValue);\n\n    this.setState({ answers });\n  };\n\n  scoreHelper(difficulty) {\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n\n    if (difficulty === 'hard') {\n      return hard;\n    } if (difficulty === 'medium') {\n      return medium;\n    } if (difficulty === 'easy') {\n      return easy;\n    }\n  }\n\n  render() {\n    const { data } = this.props;\n    const { category, question } = data;\n    const { answers, timer, result } = this.state;\n    return (\n      <article>\n        <div>\n          <p>{timer}</p>\n        </div>\n        <p data-testid=\"question-category\">{ category }</p>\n        <p data-testid=\"question-text\">{ question }</p>\n        <div data-testid=\"answer-options\">\n          {\n            answers.map(({ value, correct }) => (\n              <button\n                type=\"button\"\n                value={ correct }\n                key={ value }\n                data-testid={ correct }\n                className={ !result ? '' : correct }\n                disabled={ result }\n                onClick={ this.handleAnswer }\n              >\n                {value}\n              </button>))\n          }\n          { result && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              onClick={ this.nextQuestion }\n            >\n              Next\n            </button>)}\n        </div>\n      </article>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  data: PropTypes.shape().isRequired,\n  update: PropTypes.func.isRequired,\n  nextButtonHandler: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  update: (data) => dispatch(updateScore(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(QuestionCard);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}