{"ast":null,"code":"var _jsxFileName = \"/home/carol/Projetos/sd-024-b-project-trivia-react-redux/src/pages/Game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport QuestionCard from '../components/QuestionCard';\nimport { createAnswersArray, scoreHelper } from '../helpers';\nimport { updateScore } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      actualQuestion: 0,\n      questions: [],\n      isLoading: true,\n      answers: [],\n      timer: 30,\n      result: false\n    };\n\n    this.cronometro = () => {\n      this.setState({\n        timer: 30\n      }, () => {\n        const second = 1000;\n        const idInterval = setInterval(() => {\n          this.setState(prevState => ({\n            result: false,\n            timer: prevState.timer - 1\n          }), () => {\n            const {\n              timer\n            } = this.state;\n\n            if (timer === 0 || timer < 0) {\n              clearInterval(idInterval);\n              this.setState({\n                timer: 0,\n                result: true\n              });\n            }\n          });\n        }, second);\n      });\n    };\n\n    this.handleAnswer = event => {\n      const {\n        value\n      } = event.target;\n      const {\n        update\n      } = this.props;\n      const {\n        timer,\n        actualQuestion,\n        questions\n      } = this.state;\n      const {\n        difficulty\n      } = questions[actualQuestion];\n      const baseScore = 10;\n\n      if (value === 'correct-answer') {\n        const difficultyScore = scoreHelper(difficulty);\n        const score = baseScore * timer * difficultyScore;\n        update(score);\n      }\n\n      this.setState({\n        timer: 0,\n        result: true\n      });\n    };\n\n    this.nextButtonHelper = () => {\n      const {\n        actualQuestion,\n        questions\n      } = this.state;\n      const {\n        history\n      } = this.props;\n      const lastQuestion = 4;\n\n      if (actualQuestion >= lastQuestion) {\n        history.push('/feedback');\n      } else {\n        const incorrectAnswers = questions[actualQuestion + 1].incorrect_answers;\n        const correctAnswers = questions[actualQuestion + 1].correct_answer;\n        const answers = createAnswersArray(correctAnswers, incorrectAnswers);\n        this.cronometro();\n        this.setState(prevState => ({\n          actualQuestion: prevState.actualQuestion + 1,\n          answers\n        }));\n      }\n    };\n\n    this.nextButtonHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n      this.nextButtonHelper();\n      this.setState({\n        isLoading: false\n      });\n    };\n\n    this.fetchQuestions = async () => {\n      const {\n        history\n      } = this.props;\n      const errorCode = 3;\n      const sucessCode = 0;\n      const token = localStorage.getItem('token');\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n      const questions = await response.json();\n\n      if (questions.response_code === errorCode) {\n        localStorage.removeItem('token');\n        history.push('/');\n      } else if (questions.response_code === sucessCode) {\n        const incorrectAnswers = questions.results[0].incorrect_answers;\n        const correctAnswers = questions.results[0].correct_answer;\n        const answers = createAnswersArray(correctAnswers, incorrectAnswers);\n        this.setState({\n          questions: questions.results,\n          isLoading: false,\n          answers\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n    this.cronometro();\n  }\n\n  render() {\n    const {\n      questions,\n      actualQuestion,\n      isLoading,\n      answers,\n      result,\n      timer\n    } = this.state;\n    const {\n      history\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        history: history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"box\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Carregando... \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(QuestionCard, {\n          data: questions[actualQuestion],\n          handleAnswer: `00:${this.handleAnswer}`,\n          answers: answers,\n          result: result,\n          timer: timer,\n          actualQuestion: actualQuestion,\n          nextButtonHandler: this.nextButtonHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nGame.propTypes = {\n  history: PropTypes.shape().isRequired,\n  update: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  update: data => dispatch(updateScore(data))\n});\n\nexport default connect(null, mapDispatchToProps)(Game);","map":{"version":3,"names":["React","PropTypes","connect","Header","QuestionCard","createAnswersArray","scoreHelper","updateScore","Game","Component","state","actualQuestion","questions","isLoading","answers","timer","result","cronometro","setState","second","idInterval","setInterval","prevState","clearInterval","handleAnswer","event","value","target","update","props","difficulty","baseScore","difficultyScore","score","nextButtonHelper","history","lastQuestion","push","incorrectAnswers","incorrect_answers","correctAnswers","correct_answer","nextButtonHandler","fetchQuestions","errorCode","sucessCode","token","localStorage","getItem","response","fetch","json","response_code","removeItem","results","componentDidMount","render","propTypes","shape","isRequired","func","mapDispatchToProps","dispatch","data"],"sources":["/home/carol/Projetos/sd-024-b-project-trivia-react-redux/src/pages/Game.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header';\nimport QuestionCard from '../components/QuestionCard';\nimport { createAnswersArray, scoreHelper } from '../helpers';\nimport { updateScore } from '../redux/actions';\n\nclass Game extends React.Component {\n  state = {\n    actualQuestion: 0,\n    questions: [],\n    isLoading: true,\n    answers: [],\n    timer: 30,\n    result: false,\n  };\n\n  componentDidMount() {\n    this.fetchQuestions();\n    this.cronometro();\n  }\n\n  cronometro = () => {\n    this.setState({ timer: 30 }, () => {\n      const second = 1000;\n      const idInterval = setInterval(() => {\n        this.setState((prevState) => ({\n          result: false,\n          timer: prevState.timer - 1,\n        }), () => {\n          const { timer } = this.state;\n          if (timer === 0 || timer < 0) {\n            clearInterval(idInterval);\n            this.setState({\n              timer: 0,\n              result: true,\n            });\n          }\n        });\n      }, second);\n    });\n  };\n\n  handleAnswer = (event) => {\n    const { value } = event.target;\n    const { update } = this.props;\n    const { timer, actualQuestion, questions } = this.state;\n    const { difficulty } = questions[actualQuestion];\n    const baseScore = 10;\n\n    if (value === 'correct-answer') {\n      const difficultyScore = scoreHelper(difficulty);\n      const score = baseScore * timer * difficultyScore;\n      update(score);\n    }\n    this.setState({ timer: 0, result: true });\n  };\n\n  nextButtonHelper = () => {\n    const { actualQuestion, questions } = this.state;\n    const { history } = this.props;\n    const lastQuestion = 4;\n    if (actualQuestion >= lastQuestion) {\n      history.push('/feedback');\n    } else {\n      const incorrectAnswers = questions[actualQuestion + 1].incorrect_answers;\n      const correctAnswers = questions[actualQuestion + 1].correct_answer;\n      const answers = createAnswersArray(correctAnswers, incorrectAnswers);\n      this.cronometro();\n      this.setState((prevState) => ({\n        actualQuestion: prevState.actualQuestion + 1,\n        answers,\n      }));\n    }\n  };\n\n  nextButtonHandler = () => {\n    this.setState({ isLoading: true });\n    this.nextButtonHelper();\n    this.setState({ isLoading: false });\n  };\n\n  fetchQuestions = async () => {\n    const { history } = this.props;\n    const errorCode = 3;\n    const sucessCode = 0;\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const questions = await response.json();\n    if (questions.response_code === errorCode) {\n      localStorage.removeItem('token');\n      history.push('/');\n    } else if (questions.response_code === sucessCode) {\n      const incorrectAnswers = questions.results[0].incorrect_answers;\n      const correctAnswers = questions.results[0].correct_answer;\n      const answers = createAnswersArray(correctAnswers, incorrectAnswers);\n      this.setState({ questions: questions.results, isLoading: false, answers });\n    }\n  };\n\n  render() {\n    const { questions, actualQuestion, isLoading, answers, result, timer } = this.state;\n    const { history } = this.props;\n    return (\n      <div>\n        <Header history={ history } />\n        <section className=\"box\">\n          {isLoading ? (<p> Carregando... </p>) : (\n            <QuestionCard\n              data={ questions[actualQuestion] }\n              handleAnswer={ `00:${this.handleAnswer}` }\n              answers={ answers }\n              result={ result }\n              timer={ timer }\n              actualQuestion={ actualQuestion }\n              nextButtonHandler={ this.nextButtonHandler }\n            />)}\n        </section>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape().isRequired,\n  update: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  update: (data) => dispatch(updateScore(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(Game);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}